def __init__(self, job, testdir):
 			if os.path.exists(self.srcdir):
 				pickle.dump(newversion, open(versionfile, 'w'))
 
 
 	def setup(self):
 		pass
 
 
 	def record(self, msg):
 		status = self.testdir + "/status"
 		fd = file(status, "w")
 		fd.write(msg)
 		fd.close()
 
 	def __exec(self, parameters):
 		try:
 			os.chdir(self.testdir)
 			self.setup()
 			self.execute(*parameters)
 		except AutotestError:
 			raise
 		except:
 			raise UnhandledError('running test ' + \
 				self.__class__.__name__ + "\n")
 
 	def run(self, testname, parameters):
 		try:
 			self.__exec(parameters)
 		except Exception, detail:
 			self.record("FAIL " + detail.__str__() + "\n")
 
 			raise
 		else:
 			self.record("GOOD Completed Successfully\n")
 
 
 def fork_lambda(tmp, l):
 	sys.stdout.flush()
 	sys.stderr.flush()
 	pid = os.fork()
 	if pid:			# parent
 		(pid, status) = os.waitpid (pid,0)
 
 		ename = tmp + "/debug/error-%d" % pid
 		if (os.path.exists(ename)):
 			fd = file(ename, 'r')
 			err = pickle.load(fd)
 			fd.close()
 
 			raise err
 
 		if (status != 0):
 			raise TestError("test failed rc=%d" % (status))
 
 	else:			# child
 		try:
 			try:
 				l()
 
 			except AutotestError:
 				raise
 
 			except:
 				raise UnhandledError("test failed and threw:\n")
 
 		except Exception, detail:
 			ename = tmp + "/debug/error-%d" % (
 				os.getpid())
 			pickle.dump(detail, open(ename, "w"))
 
 			sys.stdout.flush()
 			sys.stderr.flush()
 			os._exit(1)
 
 		sys.stdout.flush()
 		sys.stderr.flush()
 		os._exit(0)
 
 # runtest: main interface for importing and instantiating new tests.
 def __runtest(self, tag, testname, test_args):
 	testd = self.testdir + '/'+ testname
 	if not os.path.exists(testd):
 		raise TestError(testname + ": test does not exist")
