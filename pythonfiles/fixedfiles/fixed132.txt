def read(self, str_or_file):
             m = name_expr.match(sect)
             if m is None:
                 raise ValueError("Event name [%s]: %s" % (sect, msg))
             type_map, drop, defaults = { }, False, { }
             for name, value in self._parser.items(sect):
                 # check if name is directive
                 if name == '@drop':
                     drop = util.as_bool(value)
                     continue
                 # check that name is legal
                 m = name_expr.match(name)
                 if m is None:
                     raise ValueError("Field name '%s': %s" % (name, msg))
                 # extract type and default value, if any
                 m = self._SCHEMAVAL.match(value)
                 if m is None:
                     raise ValueError("Bad value '%s' for field '%s'" % (
                         value, name))
                 mgd = m.groupdict()
                 value_type, value_default = mgd['type'], mgd['default']
                 # set type function
                 try:
                     fn = self._TYPEFN[value_type]
                     # If not dropping, make the 'str' function even cheaper
                     # by skipping the type map
                     if not drop and fn is str:
                         pass
                     # Otherwise, put function into mapping
                     else:
                         type_map[name] = fn
                 except KeyError:
                     raise ValueError("Unknown type '%s' in '%s=%s' "
                                      "in section [%s]" % (
                                          value_type, name, value, sect))
                 # set default value
                 if value_default is not None:
                     s = value_default[1:-1] # strip { }
                     defaults[name] = s
             self._mapping[sect] = type_map
             self._defaults[sect] = defaults
             self._drop[sect] = drop
 
     def get_schema(self):
         """Get the schema so far.
