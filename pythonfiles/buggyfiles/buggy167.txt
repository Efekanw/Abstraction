def put(self):
         try:
             l = self.headers.getheader('content-length')
             if l is None:
                 answerno('need content-length header for put')
                 return
             message = bdecode(self.rfile.read(int(l)))
             if path == '/publish/':
                 checkfunc(message)
                 ip = message.get('ip', self.client_address[0])
                 for file in message['files']:
                     if published.has_key('name') and (file['length'],
                             file['pieces'], file['piece length']) != published[name][1:]:
                         self.answer({'type': 'failure', 
                             'reason': 'mismatching data for ' + file})
                         return
                 changed = false
                 for file in message['files']:
